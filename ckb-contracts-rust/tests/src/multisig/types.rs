// Generated by Molecule 0.6.0

use molecule::prelude::*;

#[derive(Clone)]
pub struct Byte32(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for Byte32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for Byte32 { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for Byte32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}

impl ::core::default::Default for Byte32 {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
        Byte32::new_unchecked(v.into())
    }
}

impl Byte32 {
    pub const TOTAL_SIZE: usize = 32;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 32;
    pub fn nth0(&self) -> Byte { Byte::new_unchecked(self.0.slice(0..1)) }
    pub fn nth1(&self) -> Byte { Byte::new_unchecked(self.0.slice(1..2)) }
    pub fn nth2(&self) -> Byte { Byte::new_unchecked(self.0.slice(2..3)) }
    pub fn nth3(&self) -> Byte { Byte::new_unchecked(self.0.slice(3..4)) }
    pub fn nth4(&self) -> Byte { Byte::new_unchecked(self.0.slice(4..5)) }
    pub fn nth5(&self) -> Byte { Byte::new_unchecked(self.0.slice(5..6)) }
    pub fn nth6(&self) -> Byte { Byte::new_unchecked(self.0.slice(6..7)) }
    pub fn nth7(&self) -> Byte { Byte::new_unchecked(self.0.slice(7..8)) }
    pub fn nth8(&self) -> Byte { Byte::new_unchecked(self.0.slice(8..9)) }
    pub fn nth9(&self) -> Byte { Byte::new_unchecked(self.0.slice(9..10)) }
    pub fn nth10(&self) -> Byte { Byte::new_unchecked(self.0.slice(10..11)) }
    pub fn nth11(&self) -> Byte { Byte::new_unchecked(self.0.slice(11..12)) }
    pub fn nth12(&self) -> Byte { Byte::new_unchecked(self.0.slice(12..13)) }
    pub fn nth13(&self) -> Byte { Byte::new_unchecked(self.0.slice(13..14)) }
    pub fn nth14(&self) -> Byte { Byte::new_unchecked(self.0.slice(14..15)) }
    pub fn nth15(&self) -> Byte { Byte::new_unchecked(self.0.slice(15..16)) }
    pub fn nth16(&self) -> Byte { Byte::new_unchecked(self.0.slice(16..17)) }
    pub fn nth17(&self) -> Byte { Byte::new_unchecked(self.0.slice(17..18)) }
    pub fn nth18(&self) -> Byte { Byte::new_unchecked(self.0.slice(18..19)) }
    pub fn nth19(&self) -> Byte { Byte::new_unchecked(self.0.slice(19..20)) }
    pub fn nth20(&self) -> Byte { Byte::new_unchecked(self.0.slice(20..21)) }
    pub fn nth21(&self) -> Byte { Byte::new_unchecked(self.0.slice(21..22)) }
    pub fn nth22(&self) -> Byte { Byte::new_unchecked(self.0.slice(22..23)) }
    pub fn nth23(&self) -> Byte { Byte::new_unchecked(self.0.slice(23..24)) }
    pub fn nth24(&self) -> Byte { Byte::new_unchecked(self.0.slice(24..25)) }
    pub fn nth25(&self) -> Byte { Byte::new_unchecked(self.0.slice(25..26)) }
    pub fn nth26(&self) -> Byte { Byte::new_unchecked(self.0.slice(26..27)) }
    pub fn nth27(&self) -> Byte { Byte::new_unchecked(self.0.slice(27..28)) }
    pub fn nth28(&self) -> Byte { Byte::new_unchecked(self.0.slice(28..29)) }
    pub fn nth29(&self) -> Byte { Byte::new_unchecked(self.0.slice(29..30)) }
    pub fn nth30(&self) -> Byte { Byte::new_unchecked(self.0.slice(30..31)) }
    pub fn nth31(&self) -> Byte { Byte::new_unchecked(self.0.slice(31..32)) }
    pub fn raw_data(&self) -> molecule::bytes::Bytes { self.as_bytes() }
    pub fn as_reader<'r>(&'r self) -> Byte32Reader<'r> { Byte32Reader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for Byte32 {
    type Builder = Byte32Builder;
    const NAME: &'static str = "Byte32";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { Byte32(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { Byte32Reader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { Byte32Reader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder { Self::new_builder().set([self.nth0(), self.nth1(), self.nth2(), self.nth3(), self.nth4(), self.nth5(), self.nth6(), self.nth7(), self.nth8(), self.nth9(), self.nth10(), self.nth11(), self.nth12(), self.nth13(), self.nth14(), self.nth15(), self.nth16(), self.nth17(), self.nth18(), self.nth19(), self.nth20(), self.nth21(), self.nth22(), self.nth23(), self.nth24(), self.nth25(), self.nth26(), self.nth27(), self.nth28(), self.nth29(), self.nth30(), self.nth31(), ]) }
}

#[derive(Clone, Copy)]
pub struct Byte32Reader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for Byte32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for Byte32Reader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for Byte32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}

impl<'r> Byte32Reader<'r> {
    pub const TOTAL_SIZE: usize = 32;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 32;
    pub fn nth0(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[0..1]) }
    pub fn nth1(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[1..2]) }
    pub fn nth2(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[2..3]) }
    pub fn nth3(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[3..4]) }
    pub fn nth4(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[4..5]) }
    pub fn nth5(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[5..6]) }
    pub fn nth6(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[6..7]) }
    pub fn nth7(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[7..8]) }
    pub fn nth8(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[8..9]) }
    pub fn nth9(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[9..10]) }
    pub fn nth10(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[10..11]) }
    pub fn nth11(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[11..12]) }
    pub fn nth12(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[12..13]) }
    pub fn nth13(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[13..14]) }
    pub fn nth14(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[14..15]) }
    pub fn nth15(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[15..16]) }
    pub fn nth16(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[16..17]) }
    pub fn nth17(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[17..18]) }
    pub fn nth18(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[18..19]) }
    pub fn nth19(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[19..20]) }
    pub fn nth20(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[20..21]) }
    pub fn nth21(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[21..22]) }
    pub fn nth22(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[22..23]) }
    pub fn nth23(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[23..24]) }
    pub fn nth24(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[24..25]) }
    pub fn nth25(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[25..26]) }
    pub fn nth26(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[26..27]) }
    pub fn nth27(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[27..28]) }
    pub fn nth28(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[28..29]) }
    pub fn nth29(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[29..30]) }
    pub fn nth30(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[30..31]) }
    pub fn nth31(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[31..32]) }
    pub fn raw_data(&self) -> &'r [u8] { self.as_slice() }
}

impl<'r> molecule::prelude::Reader<'r> for Byte32Reader<'r> {
    type Entity = Byte32;
    const NAME: &'static str = "Byte32Reader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { Byte32Reader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE { return ve!( Self , TotalSizeNotMatch , Self :: TOTAL_SIZE , slice_len ); }
        Ok(())
    }
}

pub struct Byte32Builder(pub(crate) [Byte; 32]);

impl ::core::fmt::Debug for Byte32Builder { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:?})", Self::NAME, &self.0[..]) } }

impl ::core::default::Default for Byte32Builder { fn default() -> Self { Byte32Builder([Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), ]) } }

impl Byte32Builder {
    pub const TOTAL_SIZE: usize = 32;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 32;
    pub fn set(mut self, v: [Byte; 32]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Byte) -> Self {
        self.0[3] = v;
        self
    }
    pub fn nth4(mut self, v: Byte) -> Self {
        self.0[4] = v;
        self
    }
    pub fn nth5(mut self, v: Byte) -> Self {
        self.0[5] = v;
        self
    }
    pub fn nth6(mut self, v: Byte) -> Self {
        self.0[6] = v;
        self
    }
    pub fn nth7(mut self, v: Byte) -> Self {
        self.0[7] = v;
        self
    }
    pub fn nth8(mut self, v: Byte) -> Self {
        self.0[8] = v;
        self
    }
    pub fn nth9(mut self, v: Byte) -> Self {
        self.0[9] = v;
        self
    }
    pub fn nth10(mut self, v: Byte) -> Self {
        self.0[10] = v;
        self
    }
    pub fn nth11(mut self, v: Byte) -> Self {
        self.0[11] = v;
        self
    }
    pub fn nth12(mut self, v: Byte) -> Self {
        self.0[12] = v;
        self
    }
    pub fn nth13(mut self, v: Byte) -> Self {
        self.0[13] = v;
        self
    }
    pub fn nth14(mut self, v: Byte) -> Self {
        self.0[14] = v;
        self
    }
    pub fn nth15(mut self, v: Byte) -> Self {
        self.0[15] = v;
        self
    }
    pub fn nth16(mut self, v: Byte) -> Self {
        self.0[16] = v;
        self
    }
    pub fn nth17(mut self, v: Byte) -> Self {
        self.0[17] = v;
        self
    }
    pub fn nth18(mut self, v: Byte) -> Self {
        self.0[18] = v;
        self
    }
    pub fn nth19(mut self, v: Byte) -> Self {
        self.0[19] = v;
        self
    }
    pub fn nth20(mut self, v: Byte) -> Self {
        self.0[20] = v;
        self
    }
    pub fn nth21(mut self, v: Byte) -> Self {
        self.0[21] = v;
        self
    }
    pub fn nth22(mut self, v: Byte) -> Self {
        self.0[22] = v;
        self
    }
    pub fn nth23(mut self, v: Byte) -> Self {
        self.0[23] = v;
        self
    }
    pub fn nth24(mut self, v: Byte) -> Self {
        self.0[24] = v;
        self
    }
    pub fn nth25(mut self, v: Byte) -> Self {
        self.0[25] = v;
        self
    }
    pub fn nth26(mut self, v: Byte) -> Self {
        self.0[26] = v;
        self
    }
    pub fn nth27(mut self, v: Byte) -> Self {
        self.0[27] = v;
        self
    }
    pub fn nth28(mut self, v: Byte) -> Self {
        self.0[28] = v;
        self
    }
    pub fn nth29(mut self, v: Byte) -> Self {
        self.0[29] = v;
        self
    }
    pub fn nth30(mut self, v: Byte) -> Self {
        self.0[30] = v;
        self
    }
    pub fn nth31(mut self, v: Byte) -> Self {
        self.0[31] = v;
        self
    }
}

impl molecule::prelude::Builder for Byte32Builder {
    type Entity = Byte32;
    const NAME: &'static str = "Byte32Builder";
    fn expected_length(&self) -> usize { Self::TOTAL_SIZE }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        writer.write_all(self.0[4].as_slice())?;
        writer.write_all(self.0[5].as_slice())?;
        writer.write_all(self.0[6].as_slice())?;
        writer.write_all(self.0[7].as_slice())?;
        writer.write_all(self.0[8].as_slice())?;
        writer.write_all(self.0[9].as_slice())?;
        writer.write_all(self.0[10].as_slice())?;
        writer.write_all(self.0[11].as_slice())?;
        writer.write_all(self.0[12].as_slice())?;
        writer.write_all(self.0[13].as_slice())?;
        writer.write_all(self.0[14].as_slice())?;
        writer.write_all(self.0[15].as_slice())?;
        writer.write_all(self.0[16].as_slice())?;
        writer.write_all(self.0[17].as_slice())?;
        writer.write_all(self.0[18].as_slice())?;
        writer.write_all(self.0[19].as_slice())?;
        writer.write_all(self.0[20].as_slice())?;
        writer.write_all(self.0[21].as_slice())?;
        writer.write_all(self.0[22].as_slice())?;
        writer.write_all(self.0[23].as_slice())?;
        writer.write_all(self.0[24].as_slice())?;
        writer.write_all(self.0[25].as_slice())?;
        writer.write_all(self.0[26].as_slice())?;
        writer.write_all(self.0[27].as_slice())?;
        writer.write_all(self.0[28].as_slice())?;
        writer.write_all(self.0[29].as_slice())?;
        writer.write_all(self.0[30].as_slice())?;
        writer.write_all(self.0[31].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Byte32::new_unchecked(inner.into())
    }
}

#[derive(Clone)]
pub struct Signature(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for Signature {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for Signature { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for Signature {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}

impl ::core::default::Default for Signature {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
        Signature::new_unchecked(v.into())
    }
}

impl Signature {
    pub const TOTAL_SIZE: usize = 65;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 65;
    pub fn nth0(&self) -> Byte { Byte::new_unchecked(self.0.slice(0..1)) }
    pub fn nth1(&self) -> Byte { Byte::new_unchecked(self.0.slice(1..2)) }
    pub fn nth2(&self) -> Byte { Byte::new_unchecked(self.0.slice(2..3)) }
    pub fn nth3(&self) -> Byte { Byte::new_unchecked(self.0.slice(3..4)) }
    pub fn nth4(&self) -> Byte { Byte::new_unchecked(self.0.slice(4..5)) }
    pub fn nth5(&self) -> Byte { Byte::new_unchecked(self.0.slice(5..6)) }
    pub fn nth6(&self) -> Byte { Byte::new_unchecked(self.0.slice(6..7)) }
    pub fn nth7(&self) -> Byte { Byte::new_unchecked(self.0.slice(7..8)) }
    pub fn nth8(&self) -> Byte { Byte::new_unchecked(self.0.slice(8..9)) }
    pub fn nth9(&self) -> Byte { Byte::new_unchecked(self.0.slice(9..10)) }
    pub fn nth10(&self) -> Byte { Byte::new_unchecked(self.0.slice(10..11)) }
    pub fn nth11(&self) -> Byte { Byte::new_unchecked(self.0.slice(11..12)) }
    pub fn nth12(&self) -> Byte { Byte::new_unchecked(self.0.slice(12..13)) }
    pub fn nth13(&self) -> Byte { Byte::new_unchecked(self.0.slice(13..14)) }
    pub fn nth14(&self) -> Byte { Byte::new_unchecked(self.0.slice(14..15)) }
    pub fn nth15(&self) -> Byte { Byte::new_unchecked(self.0.slice(15..16)) }
    pub fn nth16(&self) -> Byte { Byte::new_unchecked(self.0.slice(16..17)) }
    pub fn nth17(&self) -> Byte { Byte::new_unchecked(self.0.slice(17..18)) }
    pub fn nth18(&self) -> Byte { Byte::new_unchecked(self.0.slice(18..19)) }
    pub fn nth19(&self) -> Byte { Byte::new_unchecked(self.0.slice(19..20)) }
    pub fn nth20(&self) -> Byte { Byte::new_unchecked(self.0.slice(20..21)) }
    pub fn nth21(&self) -> Byte { Byte::new_unchecked(self.0.slice(21..22)) }
    pub fn nth22(&self) -> Byte { Byte::new_unchecked(self.0.slice(22..23)) }
    pub fn nth23(&self) -> Byte { Byte::new_unchecked(self.0.slice(23..24)) }
    pub fn nth24(&self) -> Byte { Byte::new_unchecked(self.0.slice(24..25)) }
    pub fn nth25(&self) -> Byte { Byte::new_unchecked(self.0.slice(25..26)) }
    pub fn nth26(&self) -> Byte { Byte::new_unchecked(self.0.slice(26..27)) }
    pub fn nth27(&self) -> Byte { Byte::new_unchecked(self.0.slice(27..28)) }
    pub fn nth28(&self) -> Byte { Byte::new_unchecked(self.0.slice(28..29)) }
    pub fn nth29(&self) -> Byte { Byte::new_unchecked(self.0.slice(29..30)) }
    pub fn nth30(&self) -> Byte { Byte::new_unchecked(self.0.slice(30..31)) }
    pub fn nth31(&self) -> Byte { Byte::new_unchecked(self.0.slice(31..32)) }
    pub fn nth32(&self) -> Byte { Byte::new_unchecked(self.0.slice(32..33)) }
    pub fn nth33(&self) -> Byte { Byte::new_unchecked(self.0.slice(33..34)) }
    pub fn nth34(&self) -> Byte { Byte::new_unchecked(self.0.slice(34..35)) }
    pub fn nth35(&self) -> Byte { Byte::new_unchecked(self.0.slice(35..36)) }
    pub fn nth36(&self) -> Byte { Byte::new_unchecked(self.0.slice(36..37)) }
    pub fn nth37(&self) -> Byte { Byte::new_unchecked(self.0.slice(37..38)) }
    pub fn nth38(&self) -> Byte { Byte::new_unchecked(self.0.slice(38..39)) }
    pub fn nth39(&self) -> Byte { Byte::new_unchecked(self.0.slice(39..40)) }
    pub fn nth40(&self) -> Byte { Byte::new_unchecked(self.0.slice(40..41)) }
    pub fn nth41(&self) -> Byte { Byte::new_unchecked(self.0.slice(41..42)) }
    pub fn nth42(&self) -> Byte { Byte::new_unchecked(self.0.slice(42..43)) }
    pub fn nth43(&self) -> Byte { Byte::new_unchecked(self.0.slice(43..44)) }
    pub fn nth44(&self) -> Byte { Byte::new_unchecked(self.0.slice(44..45)) }
    pub fn nth45(&self) -> Byte { Byte::new_unchecked(self.0.slice(45..46)) }
    pub fn nth46(&self) -> Byte { Byte::new_unchecked(self.0.slice(46..47)) }
    pub fn nth47(&self) -> Byte { Byte::new_unchecked(self.0.slice(47..48)) }
    pub fn nth48(&self) -> Byte { Byte::new_unchecked(self.0.slice(48..49)) }
    pub fn nth49(&self) -> Byte { Byte::new_unchecked(self.0.slice(49..50)) }
    pub fn nth50(&self) -> Byte { Byte::new_unchecked(self.0.slice(50..51)) }
    pub fn nth51(&self) -> Byte { Byte::new_unchecked(self.0.slice(51..52)) }
    pub fn nth52(&self) -> Byte { Byte::new_unchecked(self.0.slice(52..53)) }
    pub fn nth53(&self) -> Byte { Byte::new_unchecked(self.0.slice(53..54)) }
    pub fn nth54(&self) -> Byte { Byte::new_unchecked(self.0.slice(54..55)) }
    pub fn nth55(&self) -> Byte { Byte::new_unchecked(self.0.slice(55..56)) }
    pub fn nth56(&self) -> Byte { Byte::new_unchecked(self.0.slice(56..57)) }
    pub fn nth57(&self) -> Byte { Byte::new_unchecked(self.0.slice(57..58)) }
    pub fn nth58(&self) -> Byte { Byte::new_unchecked(self.0.slice(58..59)) }
    pub fn nth59(&self) -> Byte { Byte::new_unchecked(self.0.slice(59..60)) }
    pub fn nth60(&self) -> Byte { Byte::new_unchecked(self.0.slice(60..61)) }
    pub fn nth61(&self) -> Byte { Byte::new_unchecked(self.0.slice(61..62)) }
    pub fn nth62(&self) -> Byte { Byte::new_unchecked(self.0.slice(62..63)) }
    pub fn nth63(&self) -> Byte { Byte::new_unchecked(self.0.slice(63..64)) }
    pub fn nth64(&self) -> Byte { Byte::new_unchecked(self.0.slice(64..65)) }
    pub fn raw_data(&self) -> molecule::bytes::Bytes { self.as_bytes() }
    pub fn as_reader<'r>(&'r self) -> SignatureReader<'r> { SignatureReader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for Signature {
    type Builder = SignatureBuilder;
    const NAME: &'static str = "Signature";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { Signature(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { SignatureReader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { SignatureReader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([self.nth0(), self.nth1(), self.nth2(), self.nth3(), self.nth4(), self.nth5(), self.nth6(), self.nth7(), self.nth8(), self.nth9(), self.nth10(), self.nth11(), self.nth12(), self.nth13(), self.nth14(), self.nth15(), self.nth16(), self.nth17(), self.nth18(), self.nth19(), self.nth20(), self.nth21(), self.nth22(), self.nth23(), self.nth24(), self.nth25(), self.nth26(), self.nth27(), self.nth28(), self.nth29(), self.nth30(), self.nth31(), self.nth32(), self.nth33(), self.nth34(), self.nth35(), self.nth36(), self.nth37(), self.nth38(), self.nth39(), self.nth40(), self.nth41(), self.nth42(), self.nth43(), self.nth44(), self.nth45(), self.nth46(), self.nth47(), self.nth48(), self.nth49(), self.nth50(), self.nth51(), self.nth52(), self.nth53(), self.nth54(), self.nth55(), self.nth56(), self.nth57(), self.nth58(), self.nth59(), self.nth60(), self.nth61(), self.nth62(), self.nth63(), self.nth64(), ])
    }
}

#[derive(Clone, Copy)]
pub struct SignatureReader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for SignatureReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for SignatureReader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for SignatureReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}

impl<'r> SignatureReader<'r> {
    pub const TOTAL_SIZE: usize = 65;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 65;
    pub fn nth0(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[0..1]) }
    pub fn nth1(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[1..2]) }
    pub fn nth2(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[2..3]) }
    pub fn nth3(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[3..4]) }
    pub fn nth4(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[4..5]) }
    pub fn nth5(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[5..6]) }
    pub fn nth6(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[6..7]) }
    pub fn nth7(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[7..8]) }
    pub fn nth8(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[8..9]) }
    pub fn nth9(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[9..10]) }
    pub fn nth10(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[10..11]) }
    pub fn nth11(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[11..12]) }
    pub fn nth12(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[12..13]) }
    pub fn nth13(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[13..14]) }
    pub fn nth14(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[14..15]) }
    pub fn nth15(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[15..16]) }
    pub fn nth16(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[16..17]) }
    pub fn nth17(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[17..18]) }
    pub fn nth18(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[18..19]) }
    pub fn nth19(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[19..20]) }
    pub fn nth20(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[20..21]) }
    pub fn nth21(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[21..22]) }
    pub fn nth22(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[22..23]) }
    pub fn nth23(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[23..24]) }
    pub fn nth24(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[24..25]) }
    pub fn nth25(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[25..26]) }
    pub fn nth26(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[26..27]) }
    pub fn nth27(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[27..28]) }
    pub fn nth28(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[28..29]) }
    pub fn nth29(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[29..30]) }
    pub fn nth30(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[30..31]) }
    pub fn nth31(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[31..32]) }
    pub fn nth32(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[32..33]) }
    pub fn nth33(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[33..34]) }
    pub fn nth34(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[34..35]) }
    pub fn nth35(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[35..36]) }
    pub fn nth36(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[36..37]) }
    pub fn nth37(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[37..38]) }
    pub fn nth38(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[38..39]) }
    pub fn nth39(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[39..40]) }
    pub fn nth40(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[40..41]) }
    pub fn nth41(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[41..42]) }
    pub fn nth42(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[42..43]) }
    pub fn nth43(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[43..44]) }
    pub fn nth44(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[44..45]) }
    pub fn nth45(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[45..46]) }
    pub fn nth46(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[46..47]) }
    pub fn nth47(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[47..48]) }
    pub fn nth48(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[48..49]) }
    pub fn nth49(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[49..50]) }
    pub fn nth50(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[50..51]) }
    pub fn nth51(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[51..52]) }
    pub fn nth52(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[52..53]) }
    pub fn nth53(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[53..54]) }
    pub fn nth54(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[54..55]) }
    pub fn nth55(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[55..56]) }
    pub fn nth56(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[56..57]) }
    pub fn nth57(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[57..58]) }
    pub fn nth58(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[58..59]) }
    pub fn nth59(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[59..60]) }
    pub fn nth60(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[60..61]) }
    pub fn nth61(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[61..62]) }
    pub fn nth62(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[62..63]) }
    pub fn nth63(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[63..64]) }
    pub fn nth64(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[64..65]) }
    pub fn raw_data(&self) -> &'r [u8] { self.as_slice() }
}

impl<'r> molecule::prelude::Reader<'r> for SignatureReader<'r> {
    type Entity = Signature;
    const NAME: &'static str = "SignatureReader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { SignatureReader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE { return ve!( Self , TotalSizeNotMatch , Self :: TOTAL_SIZE , slice_len ); }
        Ok(())
    }
}

pub struct SignatureBuilder(pub(crate) [Byte; 65]);

impl ::core::fmt::Debug for SignatureBuilder { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:?})", Self::NAME, &self.0[..]) } }

impl ::core::default::Default for SignatureBuilder {
    fn default() -> Self {
        SignatureBuilder([Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), ])
    }
}

impl SignatureBuilder {
    pub const TOTAL_SIZE: usize = 65;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 65;
    pub fn set(mut self, v: [Byte; 65]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Byte) -> Self {
        self.0[3] = v;
        self
    }
    pub fn nth4(mut self, v: Byte) -> Self {
        self.0[4] = v;
        self
    }
    pub fn nth5(mut self, v: Byte) -> Self {
        self.0[5] = v;
        self
    }
    pub fn nth6(mut self, v: Byte) -> Self {
        self.0[6] = v;
        self
    }
    pub fn nth7(mut self, v: Byte) -> Self {
        self.0[7] = v;
        self
    }
    pub fn nth8(mut self, v: Byte) -> Self {
        self.0[8] = v;
        self
    }
    pub fn nth9(mut self, v: Byte) -> Self {
        self.0[9] = v;
        self
    }
    pub fn nth10(mut self, v: Byte) -> Self {
        self.0[10] = v;
        self
    }
    pub fn nth11(mut self, v: Byte) -> Self {
        self.0[11] = v;
        self
    }
    pub fn nth12(mut self, v: Byte) -> Self {
        self.0[12] = v;
        self
    }
    pub fn nth13(mut self, v: Byte) -> Self {
        self.0[13] = v;
        self
    }
    pub fn nth14(mut self, v: Byte) -> Self {
        self.0[14] = v;
        self
    }
    pub fn nth15(mut self, v: Byte) -> Self {
        self.0[15] = v;
        self
    }
    pub fn nth16(mut self, v: Byte) -> Self {
        self.0[16] = v;
        self
    }
    pub fn nth17(mut self, v: Byte) -> Self {
        self.0[17] = v;
        self
    }
    pub fn nth18(mut self, v: Byte) -> Self {
        self.0[18] = v;
        self
    }
    pub fn nth19(mut self, v: Byte) -> Self {
        self.0[19] = v;
        self
    }
    pub fn nth20(mut self, v: Byte) -> Self {
        self.0[20] = v;
        self
    }
    pub fn nth21(mut self, v: Byte) -> Self {
        self.0[21] = v;
        self
    }
    pub fn nth22(mut self, v: Byte) -> Self {
        self.0[22] = v;
        self
    }
    pub fn nth23(mut self, v: Byte) -> Self {
        self.0[23] = v;
        self
    }
    pub fn nth24(mut self, v: Byte) -> Self {
        self.0[24] = v;
        self
    }
    pub fn nth25(mut self, v: Byte) -> Self {
        self.0[25] = v;
        self
    }
    pub fn nth26(mut self, v: Byte) -> Self {
        self.0[26] = v;
        self
    }
    pub fn nth27(mut self, v: Byte) -> Self {
        self.0[27] = v;
        self
    }
    pub fn nth28(mut self, v: Byte) -> Self {
        self.0[28] = v;
        self
    }
    pub fn nth29(mut self, v: Byte) -> Self {
        self.0[29] = v;
        self
    }
    pub fn nth30(mut self, v: Byte) -> Self {
        self.0[30] = v;
        self
    }
    pub fn nth31(mut self, v: Byte) -> Self {
        self.0[31] = v;
        self
    }
    pub fn nth32(mut self, v: Byte) -> Self {
        self.0[32] = v;
        self
    }
    pub fn nth33(mut self, v: Byte) -> Self {
        self.0[33] = v;
        self
    }
    pub fn nth34(mut self, v: Byte) -> Self {
        self.0[34] = v;
        self
    }
    pub fn nth35(mut self, v: Byte) -> Self {
        self.0[35] = v;
        self
    }
    pub fn nth36(mut self, v: Byte) -> Self {
        self.0[36] = v;
        self
    }
    pub fn nth37(mut self, v: Byte) -> Self {
        self.0[37] = v;
        self
    }
    pub fn nth38(mut self, v: Byte) -> Self {
        self.0[38] = v;
        self
    }
    pub fn nth39(mut self, v: Byte) -> Self {
        self.0[39] = v;
        self
    }
    pub fn nth40(mut self, v: Byte) -> Self {
        self.0[40] = v;
        self
    }
    pub fn nth41(mut self, v: Byte) -> Self {
        self.0[41] = v;
        self
    }
    pub fn nth42(mut self, v: Byte) -> Self {
        self.0[42] = v;
        self
    }
    pub fn nth43(mut self, v: Byte) -> Self {
        self.0[43] = v;
        self
    }
    pub fn nth44(mut self, v: Byte) -> Self {
        self.0[44] = v;
        self
    }
    pub fn nth45(mut self, v: Byte) -> Self {
        self.0[45] = v;
        self
    }
    pub fn nth46(mut self, v: Byte) -> Self {
        self.0[46] = v;
        self
    }
    pub fn nth47(mut self, v: Byte) -> Self {
        self.0[47] = v;
        self
    }
    pub fn nth48(mut self, v: Byte) -> Self {
        self.0[48] = v;
        self
    }
    pub fn nth49(mut self, v: Byte) -> Self {
        self.0[49] = v;
        self
    }
    pub fn nth50(mut self, v: Byte) -> Self {
        self.0[50] = v;
        self
    }
    pub fn nth51(mut self, v: Byte) -> Self {
        self.0[51] = v;
        self
    }
    pub fn nth52(mut self, v: Byte) -> Self {
        self.0[52] = v;
        self
    }
    pub fn nth53(mut self, v: Byte) -> Self {
        self.0[53] = v;
        self
    }
    pub fn nth54(mut self, v: Byte) -> Self {
        self.0[54] = v;
        self
    }
    pub fn nth55(mut self, v: Byte) -> Self {
        self.0[55] = v;
        self
    }
    pub fn nth56(mut self, v: Byte) -> Self {
        self.0[56] = v;
        self
    }
    pub fn nth57(mut self, v: Byte) -> Self {
        self.0[57] = v;
        self
    }
    pub fn nth58(mut self, v: Byte) -> Self {
        self.0[58] = v;
        self
    }
    pub fn nth59(mut self, v: Byte) -> Self {
        self.0[59] = v;
        self
    }
    pub fn nth60(mut self, v: Byte) -> Self {
        self.0[60] = v;
        self
    }
    pub fn nth61(mut self, v: Byte) -> Self {
        self.0[61] = v;
        self
    }
    pub fn nth62(mut self, v: Byte) -> Self {
        self.0[62] = v;
        self
    }
    pub fn nth63(mut self, v: Byte) -> Self {
        self.0[63] = v;
        self
    }
    pub fn nth64(mut self, v: Byte) -> Self {
        self.0[64] = v;
        self
    }
}

impl molecule::prelude::Builder for SignatureBuilder {
    type Entity = Signature;
    const NAME: &'static str = "SignatureBuilder";
    fn expected_length(&self) -> usize { Self::TOTAL_SIZE }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        writer.write_all(self.0[4].as_slice())?;
        writer.write_all(self.0[5].as_slice())?;
        writer.write_all(self.0[6].as_slice())?;
        writer.write_all(self.0[7].as_slice())?;
        writer.write_all(self.0[8].as_slice())?;
        writer.write_all(self.0[9].as_slice())?;
        writer.write_all(self.0[10].as_slice())?;
        writer.write_all(self.0[11].as_slice())?;
        writer.write_all(self.0[12].as_slice())?;
        writer.write_all(self.0[13].as_slice())?;
        writer.write_all(self.0[14].as_slice())?;
        writer.write_all(self.0[15].as_slice())?;
        writer.write_all(self.0[16].as_slice())?;
        writer.write_all(self.0[17].as_slice())?;
        writer.write_all(self.0[18].as_slice())?;
        writer.write_all(self.0[19].as_slice())?;
        writer.write_all(self.0[20].as_slice())?;
        writer.write_all(self.0[21].as_slice())?;
        writer.write_all(self.0[22].as_slice())?;
        writer.write_all(self.0[23].as_slice())?;
        writer.write_all(self.0[24].as_slice())?;
        writer.write_all(self.0[25].as_slice())?;
        writer.write_all(self.0[26].as_slice())?;
        writer.write_all(self.0[27].as_slice())?;
        writer.write_all(self.0[28].as_slice())?;
        writer.write_all(self.0[29].as_slice())?;
        writer.write_all(self.0[30].as_slice())?;
        writer.write_all(self.0[31].as_slice())?;
        writer.write_all(self.0[32].as_slice())?;
        writer.write_all(self.0[33].as_slice())?;
        writer.write_all(self.0[34].as_slice())?;
        writer.write_all(self.0[35].as_slice())?;
        writer.write_all(self.0[36].as_slice())?;
        writer.write_all(self.0[37].as_slice())?;
        writer.write_all(self.0[38].as_slice())?;
        writer.write_all(self.0[39].as_slice())?;
        writer.write_all(self.0[40].as_slice())?;
        writer.write_all(self.0[41].as_slice())?;
        writer.write_all(self.0[42].as_slice())?;
        writer.write_all(self.0[43].as_slice())?;
        writer.write_all(self.0[44].as_slice())?;
        writer.write_all(self.0[45].as_slice())?;
        writer.write_all(self.0[46].as_slice())?;
        writer.write_all(self.0[47].as_slice())?;
        writer.write_all(self.0[48].as_slice())?;
        writer.write_all(self.0[49].as_slice())?;
        writer.write_all(self.0[50].as_slice())?;
        writer.write_all(self.0[51].as_slice())?;
        writer.write_all(self.0[52].as_slice())?;
        writer.write_all(self.0[53].as_slice())?;
        writer.write_all(self.0[54].as_slice())?;
        writer.write_all(self.0[55].as_slice())?;
        writer.write_all(self.0[56].as_slice())?;
        writer.write_all(self.0[57].as_slice())?;
        writer.write_all(self.0[58].as_slice())?;
        writer.write_all(self.0[59].as_slice())?;
        writer.write_all(self.0[60].as_slice())?;
        writer.write_all(self.0[61].as_slice())?;
        writer.write_all(self.0[62].as_slice())?;
        writer.write_all(self.0[63].as_slice())?;
        writer.write_all(self.0[64].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Signature::new_unchecked(inner.into())
    }
}

#[derive(Clone)]
pub struct Hash(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for Hash {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for Hash { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for Hash {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}

impl ::core::default::Default for Hash {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
        Hash::new_unchecked(v.into())
    }
}

impl Hash {
    pub const TOTAL_SIZE: usize = 20;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 20;
    pub fn nth0(&self) -> Byte { Byte::new_unchecked(self.0.slice(0..1)) }
    pub fn nth1(&self) -> Byte { Byte::new_unchecked(self.0.slice(1..2)) }
    pub fn nth2(&self) -> Byte { Byte::new_unchecked(self.0.slice(2..3)) }
    pub fn nth3(&self) -> Byte { Byte::new_unchecked(self.0.slice(3..4)) }
    pub fn nth4(&self) -> Byte { Byte::new_unchecked(self.0.slice(4..5)) }
    pub fn nth5(&self) -> Byte { Byte::new_unchecked(self.0.slice(5..6)) }
    pub fn nth6(&self) -> Byte { Byte::new_unchecked(self.0.slice(6..7)) }
    pub fn nth7(&self) -> Byte { Byte::new_unchecked(self.0.slice(7..8)) }
    pub fn nth8(&self) -> Byte { Byte::new_unchecked(self.0.slice(8..9)) }
    pub fn nth9(&self) -> Byte { Byte::new_unchecked(self.0.slice(9..10)) }
    pub fn nth10(&self) -> Byte { Byte::new_unchecked(self.0.slice(10..11)) }
    pub fn nth11(&self) -> Byte { Byte::new_unchecked(self.0.slice(11..12)) }
    pub fn nth12(&self) -> Byte { Byte::new_unchecked(self.0.slice(12..13)) }
    pub fn nth13(&self) -> Byte { Byte::new_unchecked(self.0.slice(13..14)) }
    pub fn nth14(&self) -> Byte { Byte::new_unchecked(self.0.slice(14..15)) }
    pub fn nth15(&self) -> Byte { Byte::new_unchecked(self.0.slice(15..16)) }
    pub fn nth16(&self) -> Byte { Byte::new_unchecked(self.0.slice(16..17)) }
    pub fn nth17(&self) -> Byte { Byte::new_unchecked(self.0.slice(17..18)) }
    pub fn nth18(&self) -> Byte { Byte::new_unchecked(self.0.slice(18..19)) }
    pub fn nth19(&self) -> Byte { Byte::new_unchecked(self.0.slice(19..20)) }
    pub fn raw_data(&self) -> molecule::bytes::Bytes { self.as_bytes() }
    pub fn as_reader<'r>(&'r self) -> HashReader<'r> { HashReader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for Hash {
    type Builder = HashBuilder;
    const NAME: &'static str = "Hash";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { Hash(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { HashReader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { HashReader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder { Self::new_builder().set([self.nth0(), self.nth1(), self.nth2(), self.nth3(), self.nth4(), self.nth5(), self.nth6(), self.nth7(), self.nth8(), self.nth9(), self.nth10(), self.nth11(), self.nth12(), self.nth13(), self.nth14(), self.nth15(), self.nth16(), self.nth17(), self.nth18(), self.nth19(), ]) }
}

#[derive(Clone, Copy)]
pub struct HashReader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for HashReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for HashReader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for HashReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}

impl<'r> HashReader<'r> {
    pub const TOTAL_SIZE: usize = 20;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 20;
    pub fn nth0(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[0..1]) }
    pub fn nth1(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[1..2]) }
    pub fn nth2(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[2..3]) }
    pub fn nth3(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[3..4]) }
    pub fn nth4(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[4..5]) }
    pub fn nth5(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[5..6]) }
    pub fn nth6(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[6..7]) }
    pub fn nth7(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[7..8]) }
    pub fn nth8(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[8..9]) }
    pub fn nth9(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[9..10]) }
    pub fn nth10(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[10..11]) }
    pub fn nth11(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[11..12]) }
    pub fn nth12(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[12..13]) }
    pub fn nth13(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[13..14]) }
    pub fn nth14(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[14..15]) }
    pub fn nth15(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[15..16]) }
    pub fn nth16(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[16..17]) }
    pub fn nth17(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[17..18]) }
    pub fn nth18(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[18..19]) }
    pub fn nth19(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[19..20]) }
    pub fn raw_data(&self) -> &'r [u8] { self.as_slice() }
}

impl<'r> molecule::prelude::Reader<'r> for HashReader<'r> {
    type Entity = Hash;
    const NAME: &'static str = "HashReader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { HashReader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE { return ve!( Self , TotalSizeNotMatch , Self :: TOTAL_SIZE , slice_len ); }
        Ok(())
    }
}

pub struct HashBuilder(pub(crate) [Byte; 20]);

impl ::core::fmt::Debug for HashBuilder { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:?})", Self::NAME, &self.0[..]) } }

impl ::core::default::Default for HashBuilder { fn default() -> Self { HashBuilder([Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), ]) } }

impl HashBuilder {
    pub const TOTAL_SIZE: usize = 20;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 20;
    pub fn set(mut self, v: [Byte; 20]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Byte) -> Self {
        self.0[3] = v;
        self
    }
    pub fn nth4(mut self, v: Byte) -> Self {
        self.0[4] = v;
        self
    }
    pub fn nth5(mut self, v: Byte) -> Self {
        self.0[5] = v;
        self
    }
    pub fn nth6(mut self, v: Byte) -> Self {
        self.0[6] = v;
        self
    }
    pub fn nth7(mut self, v: Byte) -> Self {
        self.0[7] = v;
        self
    }
    pub fn nth8(mut self, v: Byte) -> Self {
        self.0[8] = v;
        self
    }
    pub fn nth9(mut self, v: Byte) -> Self {
        self.0[9] = v;
        self
    }
    pub fn nth10(mut self, v: Byte) -> Self {
        self.0[10] = v;
        self
    }
    pub fn nth11(mut self, v: Byte) -> Self {
        self.0[11] = v;
        self
    }
    pub fn nth12(mut self, v: Byte) -> Self {
        self.0[12] = v;
        self
    }
    pub fn nth13(mut self, v: Byte) -> Self {
        self.0[13] = v;
        self
    }
    pub fn nth14(mut self, v: Byte) -> Self {
        self.0[14] = v;
        self
    }
    pub fn nth15(mut self, v: Byte) -> Self {
        self.0[15] = v;
        self
    }
    pub fn nth16(mut self, v: Byte) -> Self {
        self.0[16] = v;
        self
    }
    pub fn nth17(mut self, v: Byte) -> Self {
        self.0[17] = v;
        self
    }
    pub fn nth18(mut self, v: Byte) -> Self {
        self.0[18] = v;
        self
    }
    pub fn nth19(mut self, v: Byte) -> Self {
        self.0[19] = v;
        self
    }
}

impl molecule::prelude::Builder for HashBuilder {
    type Entity = Hash;
    const NAME: &'static str = "HashBuilder";
    fn expected_length(&self) -> usize { Self::TOTAL_SIZE }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        writer.write_all(self.0[4].as_slice())?;
        writer.write_all(self.0[5].as_slice())?;
        writer.write_all(self.0[6].as_slice())?;
        writer.write_all(self.0[7].as_slice())?;
        writer.write_all(self.0[8].as_slice())?;
        writer.write_all(self.0[9].as_slice())?;
        writer.write_all(self.0[10].as_slice())?;
        writer.write_all(self.0[11].as_slice())?;
        writer.write_all(self.0[12].as_slice())?;
        writer.write_all(self.0[13].as_slice())?;
        writer.write_all(self.0[14].as_slice())?;
        writer.write_all(self.0[15].as_slice())?;
        writer.write_all(self.0[16].as_slice())?;
        writer.write_all(self.0[17].as_slice())?;
        writer.write_all(self.0[18].as_slice())?;
        writer.write_all(self.0[19].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Hash::new_unchecked(inner.into())
    }
}

#[derive(Clone)]
pub struct Uint64(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for Uint64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for Uint64 { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for Uint64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}

impl ::core::default::Default for Uint64 {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 0, 0, 0, 0, ];
        Uint64::new_unchecked(v.into())
    }
}

impl Uint64 {
    pub const TOTAL_SIZE: usize = 8;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 8;
    pub fn nth0(&self) -> Byte { Byte::new_unchecked(self.0.slice(0..1)) }
    pub fn nth1(&self) -> Byte { Byte::new_unchecked(self.0.slice(1..2)) }
    pub fn nth2(&self) -> Byte { Byte::new_unchecked(self.0.slice(2..3)) }
    pub fn nth3(&self) -> Byte { Byte::new_unchecked(self.0.slice(3..4)) }
    pub fn nth4(&self) -> Byte { Byte::new_unchecked(self.0.slice(4..5)) }
    pub fn nth5(&self) -> Byte { Byte::new_unchecked(self.0.slice(5..6)) }
    pub fn nth6(&self) -> Byte { Byte::new_unchecked(self.0.slice(6..7)) }
    pub fn nth7(&self) -> Byte { Byte::new_unchecked(self.0.slice(7..8)) }
    pub fn raw_data(&self) -> molecule::bytes::Bytes { self.as_bytes() }
    pub fn as_reader<'r>(&'r self) -> Uint64Reader<'r> { Uint64Reader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for Uint64 {
    type Builder = Uint64Builder;
    const NAME: &'static str = "Uint64";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { Uint64(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { Uint64Reader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { Uint64Reader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder { Self::new_builder().set([self.nth0(), self.nth1(), self.nth2(), self.nth3(), self.nth4(), self.nth5(), self.nth6(), self.nth7(), ]) }
}

#[derive(Clone, Copy)]
pub struct Uint64Reader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for Uint64Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for Uint64Reader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for Uint64Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}

impl<'r> Uint64Reader<'r> {
    pub const TOTAL_SIZE: usize = 8;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 8;
    pub fn nth0(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[0..1]) }
    pub fn nth1(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[1..2]) }
    pub fn nth2(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[2..3]) }
    pub fn nth3(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[3..4]) }
    pub fn nth4(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[4..5]) }
    pub fn nth5(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[5..6]) }
    pub fn nth6(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[6..7]) }
    pub fn nth7(&self) -> ByteReader<'r> { ByteReader::new_unchecked(&self.as_slice()[7..8]) }
    pub fn raw_data(&self) -> &'r [u8] { self.as_slice() }
}

impl<'r> molecule::prelude::Reader<'r> for Uint64Reader<'r> {
    type Entity = Uint64;
    const NAME: &'static str = "Uint64Reader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { Uint64Reader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE { return ve!( Self , TotalSizeNotMatch , Self :: TOTAL_SIZE , slice_len ); }
        Ok(())
    }
}

pub struct Uint64Builder(pub(crate) [Byte; 8]);

impl ::core::fmt::Debug for Uint64Builder { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:?})", Self::NAME, &self.0[..]) } }

impl ::core::default::Default for Uint64Builder { fn default() -> Self { Uint64Builder([Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), Byte::default(), ]) } }

impl Uint64Builder {
    pub const TOTAL_SIZE: usize = 8;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 8;
    pub fn set(mut self, v: [Byte; 8]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Byte) -> Self {
        self.0[3] = v;
        self
    }
    pub fn nth4(mut self, v: Byte) -> Self {
        self.0[4] = v;
        self
    }
    pub fn nth5(mut self, v: Byte) -> Self {
        self.0[5] = v;
        self
    }
    pub fn nth6(mut self, v: Byte) -> Self {
        self.0[6] = v;
        self
    }
    pub fn nth7(mut self, v: Byte) -> Self {
        self.0[7] = v;
        self
    }
}

impl molecule::prelude::Builder for Uint64Builder {
    type Entity = Uint64;
    const NAME: &'static str = "Uint64Builder";
    fn expected_length(&self) -> usize { Self::TOTAL_SIZE }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        writer.write_all(self.0[4].as_slice())?;
        writer.write_all(self.0[5].as_slice())?;
        writer.write_all(self.0[6].as_slice())?;
        writer.write_all(self.0[7].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Uint64::new_unchecked(inner.into())
    }
}

#[derive(Clone)]
pub struct Event(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for Event {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for Event { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for Event {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "asset_id", self.asset_id())?;
        write!(f, ", {}: {}", "ckb_receiver", self.ckb_receiver())?;
        write!(f, ", {}: {}", "amount", self.amount())?;
        write!(f, " }}")
    }
}

impl ::core::default::Default for Event {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
        Event::new_unchecked(v.into())
    }
}

impl Event {
    pub const TOTAL_SIZE: usize = 72;
    pub const FIELD_SIZES: [usize; 3] = [32, 32, 8, ];
    pub const FIELD_COUNT: usize = 3;
    pub fn asset_id(&self) -> Byte32 { Byte32::new_unchecked(self.0.slice(0..32)) }
    pub fn ckb_receiver(&self) -> Byte32 { Byte32::new_unchecked(self.0.slice(32..64)) }
    pub fn amount(&self) -> Uint64 { Uint64::new_unchecked(self.0.slice(64..72)) }
    pub fn as_reader<'r>(&'r self) -> EventReader<'r> { EventReader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for Event {
    type Builder = EventBuilder;
    const NAME: &'static str = "Event";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { Event(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { EventReader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { EventReader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder { Self::new_builder().asset_id(self.asset_id()).ckb_receiver(self.ckb_receiver()).amount(self.amount()) }
}

#[derive(Clone, Copy)]
pub struct EventReader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for EventReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for EventReader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for EventReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "asset_id", self.asset_id())?;
        write!(f, ", {}: {}", "ckb_receiver", self.ckb_receiver())?;
        write!(f, ", {}: {}", "amount", self.amount())?;
        write!(f, " }}")
    }
}

impl<'r> EventReader<'r> {
    pub const TOTAL_SIZE: usize = 72;
    pub const FIELD_SIZES: [usize; 3] = [32, 32, 8, ];
    pub const FIELD_COUNT: usize = 3;
    pub fn asset_id(&self) -> Byte32Reader<'r> { Byte32Reader::new_unchecked(&self.as_slice()[0..32]) }
    pub fn ckb_receiver(&self) -> Byte32Reader<'r> { Byte32Reader::new_unchecked(&self.as_slice()[32..64]) }
    pub fn amount(&self) -> Uint64Reader<'r> { Uint64Reader::new_unchecked(&self.as_slice()[64..72]) }
}

impl<'r> molecule::prelude::Reader<'r> for EventReader<'r> {
    type Entity = Event;
    const NAME: &'static str = "EventReader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { EventReader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE { return ve!( Self , TotalSizeNotMatch , Self :: TOTAL_SIZE , slice_len ); }
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct EventBuilder { pub(crate) asset_id: Byte32, pub(crate) ckb_receiver: Byte32, pub(crate) amount: Uint64 }

impl EventBuilder {
    pub const TOTAL_SIZE: usize = 72;
    pub const FIELD_SIZES: [usize; 3] = [32, 32, 8, ];
    pub const FIELD_COUNT: usize = 3;
    pub fn asset_id(mut self, v: Byte32) -> Self {
        self.asset_id = v;
        self
    }
    pub fn ckb_receiver(mut self, v: Byte32) -> Self {
        self.ckb_receiver = v;
        self
    }
    pub fn amount(mut self, v: Uint64) -> Self {
        self.amount = v;
        self
    }
}

impl molecule::prelude::Builder for EventBuilder {
    type Entity = Event;
    const NAME: &'static str = "EventBuilder";
    fn expected_length(&self) -> usize { Self::TOTAL_SIZE }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.asset_id.as_slice())?;
        writer.write_all(self.ckb_receiver.as_slice())?;
        writer.write_all(self.amount.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Event::new_unchecked(inner.into())
    }
}

#[derive(Clone)]
pub struct EventsVec(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for EventsVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for EventsVec { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for EventsVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() { if i == 0 { write!(f, "{}", self.get_unchecked(i))?; } else { write!(f, ", {}", self.get_unchecked(i))?; } }
        write!(f, "]")
    }
}

impl ::core::default::Default for EventsVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, ];
        EventsVec::new_unchecked(v.into())
    }
}

impl EventsVec {
    pub const ITEM_SIZE: usize = 72;
    pub fn total_size(&self) -> usize { molecule::NUMBER_SIZE * (self.item_count() + 1) }
    pub fn item_count(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn len(&self) -> usize { self.item_count() }
    pub fn is_empty(&self) -> bool { self.len() == 0 }
    pub fn get(&self, idx: usize) -> Option<Event> { if idx >= self.len() { None } else { Some(self.get_unchecked(idx)) } }
    pub fn get_unchecked(&self, idx: usize) -> Event {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Event::new_unchecked(self.0.slice(start..end))
    }
    pub fn as_reader<'r>(&'r self) -> EventsVecReader<'r> { EventsVecReader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for EventsVec {
    type Builder = EventsVecBuilder;
    const NAME: &'static str = "EventsVec";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { EventsVec(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { EventsVecReader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { EventsVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder { Self::new_builder().extend(self.into_iter()) }
}

#[derive(Clone, Copy)]
pub struct EventsVecReader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for EventsVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for EventsVecReader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for EventsVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() { if i == 0 { write!(f, "{}", self.get_unchecked(i))?; } else { write!(f, ", {}", self.get_unchecked(i))?; } }
        write!(f, "]")
    }
}

impl<'r> EventsVecReader<'r> {
    pub const ITEM_SIZE: usize = 72;
    pub fn total_size(&self) -> usize { molecule::NUMBER_SIZE * (self.item_count() + 1) }
    pub fn item_count(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn len(&self) -> usize { self.item_count() }
    pub fn is_empty(&self) -> bool { self.len() == 0 }
    pub fn get(&self, idx: usize) -> Option<EventReader<'r>> { if idx >= self.len() { None } else { Some(self.get_unchecked(idx)) } }
    pub fn get_unchecked(&self, idx: usize) -> EventReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        EventReader::new_unchecked(&self.as_slice()[start..end])
    }
}

impl<'r> molecule::prelude::Reader<'r> for EventsVecReader<'r> {
    type Entity = EventsVec;
    const NAME: &'static str = "EventsVecReader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { EventsVecReader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE { return ve!( Self , HeaderIsBroken , molecule :: NUMBER_SIZE , slice_len ); }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE { return ve!( Self , TotalSizeNotMatch , molecule :: NUMBER_SIZE , slice_len ); }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size { return ve!( Self , TotalSizeNotMatch , total_size , slice_len ); }
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct EventsVecBuilder(pub(crate) Vec<Event>);

impl EventsVecBuilder {
    pub const ITEM_SIZE: usize = 72;
    pub fn set(mut self, v: Vec<Event>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: Event) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item=Event>>(mut self, iter: T) -> Self {
        for elem in iter { self.0.push(elem); }
        self
    }
}

impl molecule::prelude::Builder for EventsVecBuilder {
    type Entity = EventsVec;
    const NAME: &'static str = "EventsVecBuilder";
    fn expected_length(&self) -> usize { molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len() }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] { writer.write_all(inner.as_slice())?; }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        EventsVec::new_unchecked(inner.into())
    }
}

pub struct EventsVecIterator(EventsVec, usize, usize);

impl ::core::iter::Iterator for EventsVecIterator {
    type Item = Event;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 { None } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}

impl ::core::iter::ExactSizeIterator for EventsVecIterator { fn len(&self) -> usize { self.2 - self.1 } }

impl ::core::iter::IntoIterator for EventsVec {
    type Item = Event;
    type IntoIter = EventsVecIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        EventsVecIterator(self, 0, len)
    }
}

impl<'r> EventsVecReader<'r> { pub fn iter<'t>(&'t self) -> EventsVecReaderIterator<'t, 'r> { EventsVecReaderIterator(&self, 0, self.len()) } }

pub struct EventsVecReaderIterator<'t, 'r> (&'t EventsVecReader<'r>, usize, usize);

impl<'t : 'r, 'r> ::core::iter::Iterator for EventsVecReaderIterator<'t, 'r> {
    type Item = EventReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 { None } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}

impl<'t : 'r, 'r> ::core::iter::ExactSizeIterator for EventsVecReaderIterator<'t, 'r> { fn len(&self) -> usize { self.2 - self.1 } }

#[derive(Clone)]
pub struct MutaHeader(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for MutaHeader {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for MutaHeader { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for MutaHeader {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "height", self.height())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 { write!(f, ", .. ({} fields)", extra_count)?; }
        write!(f, " }}")
    }
}

impl ::core::default::Default for MutaHeader {
    fn default() -> Self {
        let v: Vec<u8> = vec![16, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
        MutaHeader::new_unchecked(v.into())
    }
}

impl MutaHeader {
    pub const FIELD_COUNT: usize = 1;
    pub fn total_size(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn field_count(&self) -> usize { if self.total_size() == molecule::NUMBER_SIZE { 0 } else { (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1 } }
    pub fn count_extra_fields(&self) -> usize { self.field_count() - Self::FIELD_COUNT }
    pub fn has_extra_fields(&self) -> bool { Self::FIELD_COUNT != self.field_count() }
    pub fn height(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[8..]) as usize;
            Uint64::new_unchecked(self.0.slice(start..end))
        } else { Uint64::new_unchecked(self.0.slice(start..)) }
    }
    pub fn as_reader<'r>(&'r self) -> MutaHeaderReader<'r> { MutaHeaderReader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for MutaHeader {
    type Builder = MutaHeaderBuilder;
    const NAME: &'static str = "MutaHeader";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { MutaHeader(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { MutaHeaderReader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { MutaHeaderReader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder { Self::new_builder().height(self.height()) }
}

#[derive(Clone, Copy)]
pub struct MutaHeaderReader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for MutaHeaderReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for MutaHeaderReader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for MutaHeaderReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "height", self.height())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 { write!(f, ", .. ({} fields)", extra_count)?; }
        write!(f, " }}")
    }
}

impl<'r> MutaHeaderReader<'r> {
    pub const FIELD_COUNT: usize = 1;
    pub fn total_size(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn field_count(&self) -> usize { if self.total_size() == molecule::NUMBER_SIZE { 0 } else { (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1 } }
    pub fn count_extra_fields(&self) -> usize { self.field_count() - Self::FIELD_COUNT }
    pub fn has_extra_fields(&self) -> bool { Self::FIELD_COUNT != self.field_count() }
    pub fn height(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[8..]) as usize;
            Uint64Reader::new_unchecked(&self.as_slice()[start..end])
        } else { Uint64Reader::new_unchecked(&self.as_slice()[start..]) }
    }
}

impl<'r> molecule::prelude::Reader<'r> for MutaHeaderReader<'r> {
    type Entity = MutaHeader;
    const NAME: &'static str = "MutaHeaderReader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { MutaHeaderReader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE { return ve!( Self , HeaderIsBroken , molecule :: NUMBER_SIZE , slice_len ); }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size { return ve!( Self , TotalSizeNotMatch , total_size , slice_len ); }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 { return Ok(()); }
        if slice_len < molecule::NUMBER_SIZE * 2 { return ve!( Self , HeaderIsBroken , molecule :: NUMBER_SIZE * 2 , slice_len ); }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 { return ve!( Self , OffsetsNotMatch ); }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT { return ve!( Self , FieldCountNotMatch , Self :: FIELD_COUNT , field_count ); } else if !compatible && field_count > Self::FIELD_COUNT { return ve!( Self , FieldCountNotMatch , Self :: FIELD_COUNT , field_count ); };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size { return ve!( Self , HeaderIsBroken , header_size , slice_len ); }
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..].chunks(molecule::NUMBER_SIZE).take(field_count).map(|x| molecule::unpack_number(x) as usize).collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) { return ve!( Self , OffsetsNotMatch ); }
        Uint64Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct MutaHeaderBuilder { pub(crate) height: Uint64 }

impl MutaHeaderBuilder {
    pub const FIELD_COUNT: usize = 1;
    pub fn height(mut self, v: Uint64) -> Self {
        self.height = v;
        self
    }
}

impl molecule::prelude::Builder for MutaHeaderBuilder {
    type Entity = MutaHeader;
    const NAME: &'static str = "MutaHeaderBuilder";
    fn expected_length(&self) -> usize { molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1) + self.height.as_slice().len() }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.height.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() { writer.write_all(&molecule::pack_number(offset as molecule::Number))?; }
        writer.write_all(self.height.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        MutaHeader::new_unchecked(inner.into())
    }
}

#[derive(Clone)]
pub struct Message(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for Message {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for Message { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for Message {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "header", self.header())?;
        write!(f, ", {}: {}", "events", self.events())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 { write!(f, ", .. ({} fields)", extra_count)?; }
        write!(f, " }}")
    }
}

impl ::core::default::Default for Message {
    fn default() -> Self {
        let v: Vec<u8> = vec![32, 0, 0, 0, 12, 0, 0, 0, 28, 0, 0, 0, 16, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ];
        Message::new_unchecked(v.into())
    }
}

impl Message {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn field_count(&self) -> usize { if self.total_size() == molecule::NUMBER_SIZE { 0 } else { (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1 } }
    pub fn count_extra_fields(&self) -> usize { self.field_count() - Self::FIELD_COUNT }
    pub fn has_extra_fields(&self) -> bool { Self::FIELD_COUNT != self.field_count() }
    pub fn header(&self) -> MutaHeader {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        MutaHeader::new_unchecked(self.0.slice(start..end))
    }
    pub fn events(&self) -> EventsVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[12..]) as usize;
            EventsVec::new_unchecked(self.0.slice(start..end))
        } else { EventsVec::new_unchecked(self.0.slice(start..)) }
    }
    pub fn as_reader<'r>(&'r self) -> MessageReader<'r> { MessageReader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for Message {
    type Builder = MessageBuilder;
    const NAME: &'static str = "Message";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { Message(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { MessageReader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { MessageReader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder { Self::new_builder().header(self.header()).events(self.events()) }
}

#[derive(Clone, Copy)]
pub struct MessageReader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for MessageReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for MessageReader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for MessageReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "header", self.header())?;
        write!(f, ", {}: {}", "events", self.events())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 { write!(f, ", .. ({} fields)", extra_count)?; }
        write!(f, " }}")
    }
}

impl<'r> MessageReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn field_count(&self) -> usize { if self.total_size() == molecule::NUMBER_SIZE { 0 } else { (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1 } }
    pub fn count_extra_fields(&self) -> usize { self.field_count() - Self::FIELD_COUNT }
    pub fn has_extra_fields(&self) -> bool { Self::FIELD_COUNT != self.field_count() }
    pub fn header(&self) -> MutaHeaderReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        MutaHeaderReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn events(&self) -> EventsVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[12..]) as usize;
            EventsVecReader::new_unchecked(&self.as_slice()[start..end])
        } else { EventsVecReader::new_unchecked(&self.as_slice()[start..]) }
    }
}

impl<'r> molecule::prelude::Reader<'r> for MessageReader<'r> {
    type Entity = Message;
    const NAME: &'static str = "MessageReader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { MessageReader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE { return ve!( Self , HeaderIsBroken , molecule :: NUMBER_SIZE , slice_len ); }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size { return ve!( Self , TotalSizeNotMatch , total_size , slice_len ); }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 { return Ok(()); }
        if slice_len < molecule::NUMBER_SIZE * 2 { return ve!( Self , HeaderIsBroken , molecule :: NUMBER_SIZE * 2 , slice_len ); }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 { return ve!( Self , OffsetsNotMatch ); }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT { return ve!( Self , FieldCountNotMatch , Self :: FIELD_COUNT , field_count ); } else if !compatible && field_count > Self::FIELD_COUNT { return ve!( Self , FieldCountNotMatch , Self :: FIELD_COUNT , field_count ); };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size { return ve!( Self , HeaderIsBroken , header_size , slice_len ); }
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..].chunks(molecule::NUMBER_SIZE).take(field_count).map(|x| molecule::unpack_number(x) as usize).collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) { return ve!( Self , OffsetsNotMatch ); }
        MutaHeaderReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        EventsVecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct MessageBuilder { pub(crate) header: MutaHeader, pub(crate) events: EventsVec }

impl MessageBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub fn header(mut self, v: MutaHeader) -> Self {
        self.header = v;
        self
    }
    pub fn events(mut self, v: EventsVec) -> Self {
        self.events = v;
        self
    }
}

impl molecule::prelude::Builder for MessageBuilder {
    type Entity = Message;
    const NAME: &'static str = "MessageBuilder";
    fn expected_length(&self) -> usize { molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1) + self.header.as_slice().len() + self.events.as_slice().len() }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.header.as_slice().len();
        offsets.push(total_size);
        total_size += self.events.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() { writer.write_all(&molecule::pack_number(offset as molecule::Number))?; }
        writer.write_all(self.header.as_slice())?;
        writer.write_all(self.events.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Message::new_unchecked(inner.into())
    }
}

#[derive(Clone)]
pub struct MessageVec(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for MessageVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for MessageVec { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for MessageVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() { if i == 0 { write!(f, "{}", self.get_unchecked(i))?; } else { write!(f, ", {}", self.get_unchecked(i))?; } }
        write!(f, "]")
    }
}

impl ::core::default::Default for MessageVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0, ];
        MessageVec::new_unchecked(v.into())
    }
}

impl MessageVec {
    pub fn total_size(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn item_count(&self) -> usize { if self.total_size() == molecule::NUMBER_SIZE { 0 } else { (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1 } }
    pub fn len(&self) -> usize { self.item_count() }
    pub fn is_empty(&self) -> bool { self.len() == 0 }
    pub fn get(&self, idx: usize) -> Option<Message> { if idx >= self.len() { None } else { Some(self.get_unchecked(idx)) } }
    pub fn get_unchecked(&self, idx: usize) -> Message {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 { Message::new_unchecked(self.0.slice(start..)) } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            Message::new_unchecked(self.0.slice(start..end))
        }
    }
    pub fn as_reader<'r>(&'r self) -> MessageVecReader<'r> { MessageVecReader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for MessageVec {
    type Builder = MessageVecBuilder;
    const NAME: &'static str = "MessageVec";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { MessageVec(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { MessageVecReader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { MessageVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder { Self::new_builder().extend(self.into_iter()) }
}

#[derive(Clone, Copy)]
pub struct MessageVecReader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for MessageVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for MessageVecReader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for MessageVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() { if i == 0 { write!(f, "{}", self.get_unchecked(i))?; } else { write!(f, ", {}", self.get_unchecked(i))?; } }
        write!(f, "]")
    }
}

impl<'r> MessageVecReader<'r> {
    pub fn total_size(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn item_count(&self) -> usize { if self.total_size() == molecule::NUMBER_SIZE { 0 } else { (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1 } }
    pub fn len(&self) -> usize { self.item_count() }
    pub fn is_empty(&self) -> bool { self.len() == 0 }
    pub fn get(&self, idx: usize) -> Option<MessageReader<'r>> { if idx >= self.len() { None } else { Some(self.get_unchecked(idx)) } }
    pub fn get_unchecked(&self, idx: usize) -> MessageReader<'r> {
        let slice = self.as_slice();
        let start_idx = molecule::NUMBER_SIZE * (1 + idx);
        let start = molecule::unpack_number(&slice[start_idx..]) as usize;
        if idx == self.len() - 1 { MessageReader::new_unchecked(&self.as_slice()[start..]) } else {
            let end_idx = start_idx + molecule::NUMBER_SIZE;
            let end = molecule::unpack_number(&slice[end_idx..]) as usize;
            MessageReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}

impl<'r> molecule::prelude::Reader<'r> for MessageVecReader<'r> {
    type Entity = MessageVec;
    const NAME: &'static str = "MessageVecReader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { MessageVecReader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE { return ve!( Self , HeaderIsBroken , molecule :: NUMBER_SIZE , slice_len ); }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size { return ve!( Self , TotalSizeNotMatch , total_size , slice_len ); }
        if slice_len == molecule::NUMBER_SIZE { return Ok(()); }
        if slice_len < molecule::NUMBER_SIZE * 2 { return ve!( Self , TotalSizeNotMatch , molecule :: NUMBER_SIZE * 2 , slice_len ); }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 { return ve!( Self , OffsetsNotMatch ); }
        let item_count = offset_first / 4 - 1;
        let header_size = molecule::NUMBER_SIZE * (item_count + 1);
        if slice_len < header_size { return ve!( Self , HeaderIsBroken , header_size , slice_len ); }
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..].chunks(molecule::NUMBER_SIZE).take(item_count).map(|x| molecule::unpack_number(x) as usize).collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) { return ve!( Self , OffsetsNotMatch ); }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            MessageReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct MessageVecBuilder(pub(crate) Vec<Message>);

impl MessageVecBuilder {
    pub fn set(mut self, v: Vec<Message>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: Message) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item=Message>>(mut self, iter: T) -> Self {
        for elem in iter { self.0.push(elem); }
        self
    }
}

impl molecule::prelude::Builder for MessageVecBuilder {
    type Entity = MessageVec;
    const NAME: &'static str = "MessageVecBuilder";
    fn expected_length(&self) -> usize { molecule::NUMBER_SIZE * (self.0.len() + 1) + self.0.iter().map(|inner| inner.as_slice().len()).sum::<usize>() }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 { writer.write_all(&molecule::pack_number(molecule::NUMBER_SIZE as molecule::Number))?; } else {
            let (total_size, offsets) = self.0.iter().fold((molecule::NUMBER_SIZE * (item_count + 1), Vec::with_capacity(item_count), ), |(start, mut offsets), inner| {
                offsets.push(start);
                (start + inner.as_slice().len(), offsets)
            }, );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() { writer.write_all(&molecule::pack_number(offset as molecule::Number))?; }
            for inner in self.0.iter() { writer.write_all(inner.as_slice())?; }
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        MessageVec::new_unchecked(inner.into())
    }
}

pub struct MessageVecIterator(MessageVec, usize, usize);

impl ::core::iter::Iterator for MessageVecIterator {
    type Item = Message;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 { None } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}

impl ::core::iter::ExactSizeIterator for MessageVecIterator { fn len(&self) -> usize { self.2 - self.1 } }

impl ::core::iter::IntoIterator for MessageVec {
    type Item = Message;
    type IntoIter = MessageVecIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        MessageVecIterator(self, 0, len)
    }
}

impl<'r> MessageVecReader<'r> { pub fn iter<'t>(&'t self) -> MessageVecReaderIterator<'t, 'r> { MessageVecReaderIterator(&self, 0, self.len()) } }

pub struct MessageVecReaderIterator<'t, 'r> (&'t MessageVecReader<'r>, usize, usize);

impl<'t : 'r, 'r> ::core::iter::Iterator for MessageVecReaderIterator<'t, 'r> {
    type Item = MessageReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 { None } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}

impl<'t : 'r, 'r> ::core::iter::ExactSizeIterator for MessageVecReaderIterator<'t, 'r> { fn len(&self) -> usize { self.2 - self.1 } }

#[derive(Clone)]
pub struct SignatureVec(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for SignatureVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for SignatureVec { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for SignatureVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() { if i == 0 { write!(f, "{}", self.get_unchecked(i))?; } else { write!(f, ", {}", self.get_unchecked(i))?; } }
        write!(f, "]")
    }
}

impl ::core::default::Default for SignatureVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, ];
        SignatureVec::new_unchecked(v.into())
    }
}

impl SignatureVec {
    pub const ITEM_SIZE: usize = 65;
    pub fn total_size(&self) -> usize { molecule::NUMBER_SIZE * (self.item_count() + 1) }
    pub fn item_count(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn len(&self) -> usize { self.item_count() }
    pub fn is_empty(&self) -> bool { self.len() == 0 }
    pub fn get(&self, idx: usize) -> Option<Signature> { if idx >= self.len() { None } else { Some(self.get_unchecked(idx)) } }
    pub fn get_unchecked(&self, idx: usize) -> Signature {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Signature::new_unchecked(self.0.slice(start..end))
    }
    pub fn as_reader<'r>(&'r self) -> SignatureVecReader<'r> { SignatureVecReader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for SignatureVec {
    type Builder = SignatureVecBuilder;
    const NAME: &'static str = "SignatureVec";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { SignatureVec(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { SignatureVecReader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { SignatureVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder { Self::new_builder().extend(self.into_iter()) }
}

#[derive(Clone, Copy)]
pub struct SignatureVecReader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for SignatureVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for SignatureVecReader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for SignatureVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() { if i == 0 { write!(f, "{}", self.get_unchecked(i))?; } else { write!(f, ", {}", self.get_unchecked(i))?; } }
        write!(f, "]")
    }
}

impl<'r> SignatureVecReader<'r> {
    pub const ITEM_SIZE: usize = 65;
    pub fn total_size(&self) -> usize { molecule::NUMBER_SIZE * (self.item_count() + 1) }
    pub fn item_count(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn len(&self) -> usize { self.item_count() }
    pub fn is_empty(&self) -> bool { self.len() == 0 }
    pub fn get(&self, idx: usize) -> Option<SignatureReader<'r>> { if idx >= self.len() { None } else { Some(self.get_unchecked(idx)) } }
    pub fn get_unchecked(&self, idx: usize) -> SignatureReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        SignatureReader::new_unchecked(&self.as_slice()[start..end])
    }
}

impl<'r> molecule::prelude::Reader<'r> for SignatureVecReader<'r> {
    type Entity = SignatureVec;
    const NAME: &'static str = "SignatureVecReader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { SignatureVecReader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE { return ve!( Self , HeaderIsBroken , molecule :: NUMBER_SIZE , slice_len ); }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE { return ve!( Self , TotalSizeNotMatch , molecule :: NUMBER_SIZE , slice_len ); }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size { return ve!( Self , TotalSizeNotMatch , total_size , slice_len ); }
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct SignatureVecBuilder(pub(crate) Vec<Signature>);

impl SignatureVecBuilder {
    pub const ITEM_SIZE: usize = 65;
    pub fn set(mut self, v: Vec<Signature>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: Signature) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item=Signature>>(mut self, iter: T) -> Self {
        for elem in iter { self.0.push(elem); }
        self
    }
}

impl molecule::prelude::Builder for SignatureVecBuilder {
    type Entity = SignatureVec;
    const NAME: &'static str = "SignatureVecBuilder";
    fn expected_length(&self) -> usize { molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len() }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] { writer.write_all(inner.as_slice())?; }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SignatureVec::new_unchecked(inner.into())
    }
}

pub struct SignatureVecIterator(SignatureVec, usize, usize);

impl ::core::iter::Iterator for SignatureVecIterator {
    type Item = Signature;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 { None } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}

impl ::core::iter::ExactSizeIterator for SignatureVecIterator { fn len(&self) -> usize { self.2 - self.1 } }

impl ::core::iter::IntoIterator for SignatureVec {
    type Item = Signature;
    type IntoIter = SignatureVecIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        SignatureVecIterator(self, 0, len)
    }
}

impl<'r> SignatureVecReader<'r> { pub fn iter<'t>(&'t self) -> SignatureVecReaderIterator<'t, 'r> { SignatureVecReaderIterator(&self, 0, self.len()) } }

pub struct SignatureVecReaderIterator<'t, 'r> (&'t SignatureVecReader<'r>, usize, usize);

impl<'t : 'r, 'r> ::core::iter::Iterator for SignatureVecReaderIterator<'t, 'r> {
    type Item = SignatureReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 { None } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}

impl<'t : 'r, 'r> ::core::iter::ExactSizeIterator for SignatureVecReaderIterator<'t, 'r> { fn len(&self) -> usize { self.2 - self.1 } }

#[derive(Clone)]
pub struct CrosschainWitness(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for CrosschainWitness {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for CrosschainWitness { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for CrosschainWitness {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "messages", self.messages())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 { write!(f, ", .. ({} fields)", extra_count)?; }
        write!(f, " }}")
    }
}

impl ::core::default::Default for CrosschainWitness {
    fn default() -> Self {
        let v: Vec<u8> = vec![20, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, ];
        CrosschainWitness::new_unchecked(v.into())
    }
}

impl CrosschainWitness {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn field_count(&self) -> usize { if self.total_size() == molecule::NUMBER_SIZE { 0 } else { (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1 } }
    pub fn count_extra_fields(&self) -> usize { self.field_count() - Self::FIELD_COUNT }
    pub fn has_extra_fields(&self) -> bool { Self::FIELD_COUNT != self.field_count() }
    pub fn messages(&self) -> MessageVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        MessageVec::new_unchecked(self.0.slice(start..end))
    }
    pub fn proof(&self) -> SignatureVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[12..]) as usize;
            SignatureVec::new_unchecked(self.0.slice(start..end))
        } else { SignatureVec::new_unchecked(self.0.slice(start..)) }
    }
    pub fn as_reader<'r>(&'r self) -> CrosschainWitnessReader<'r> { CrosschainWitnessReader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for CrosschainWitness {
    type Builder = CrosschainWitnessBuilder;
    const NAME: &'static str = "CrosschainWitness";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { CrosschainWitness(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { CrosschainWitnessReader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { CrosschainWitnessReader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder { Self::new_builder().messages(self.messages()).proof(self.proof()) }
}

#[derive(Clone, Copy)]
pub struct CrosschainWitnessReader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for CrosschainWitnessReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for CrosschainWitnessReader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for CrosschainWitnessReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "messages", self.messages())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 { write!(f, ", .. ({} fields)", extra_count)?; }
        write!(f, " }}")
    }
}

impl<'r> CrosschainWitnessReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn field_count(&self) -> usize { if self.total_size() == molecule::NUMBER_SIZE { 0 } else { (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1 } }
    pub fn count_extra_fields(&self) -> usize { self.field_count() - Self::FIELD_COUNT }
    pub fn has_extra_fields(&self) -> bool { Self::FIELD_COUNT != self.field_count() }
    pub fn messages(&self) -> MessageVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        MessageVecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn proof(&self) -> SignatureVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[12..]) as usize;
            SignatureVecReader::new_unchecked(&self.as_slice()[start..end])
        } else { SignatureVecReader::new_unchecked(&self.as_slice()[start..]) }
    }
}

impl<'r> molecule::prelude::Reader<'r> for CrosschainWitnessReader<'r> {
    type Entity = CrosschainWitness;
    const NAME: &'static str = "CrosschainWitnessReader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { CrosschainWitnessReader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE { return ve!( Self , HeaderIsBroken , molecule :: NUMBER_SIZE , slice_len ); }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size { return ve!( Self , TotalSizeNotMatch , total_size , slice_len ); }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 { return Ok(()); }
        if slice_len < molecule::NUMBER_SIZE * 2 { return ve!( Self , HeaderIsBroken , molecule :: NUMBER_SIZE * 2 , slice_len ); }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 { return ve!( Self , OffsetsNotMatch ); }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT { return ve!( Self , FieldCountNotMatch , Self :: FIELD_COUNT , field_count ); } else if !compatible && field_count > Self::FIELD_COUNT { return ve!( Self , FieldCountNotMatch , Self :: FIELD_COUNT , field_count ); };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size { return ve!( Self , HeaderIsBroken , header_size , slice_len ); }
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..].chunks(molecule::NUMBER_SIZE).take(field_count).map(|x| molecule::unpack_number(x) as usize).collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) { return ve!( Self , OffsetsNotMatch ); }
        MessageVecReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        SignatureVecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct CrosschainWitnessBuilder { pub(crate) messages: MessageVec, pub(crate) proof: SignatureVec }

impl CrosschainWitnessBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub fn messages(mut self, v: MessageVec) -> Self {
        self.messages = v;
        self
    }
    pub fn proof(mut self, v: SignatureVec) -> Self {
        self.proof = v;
        self
    }
}

impl molecule::prelude::Builder for CrosschainWitnessBuilder {
    type Entity = CrosschainWitness;
    const NAME: &'static str = "CrosschainWitnessBuilder";
    fn expected_length(&self) -> usize { molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1) + self.messages.as_slice().len() + self.proof.as_slice().len() }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.messages.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() { writer.write_all(&molecule::pack_number(offset as molecule::Number))?; }
        writer.write_all(self.messages.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        CrosschainWitness::new_unchecked(inner.into())
    }
}

#[derive(Clone)]
pub struct Hashes(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for Hashes {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for Hashes { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for Hashes {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() { if i == 0 { write!(f, "{}", self.get_unchecked(i))?; } else { write!(f, ", {}", self.get_unchecked(i))?; } }
        write!(f, "]")
    }
}

impl ::core::default::Default for Hashes {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, ];
        Hashes::new_unchecked(v.into())
    }
}

impl Hashes {
    pub const ITEM_SIZE: usize = 20;
    pub fn total_size(&self) -> usize { molecule::NUMBER_SIZE * (self.item_count() + 1) }
    pub fn item_count(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn len(&self) -> usize { self.item_count() }
    pub fn is_empty(&self) -> bool { self.len() == 0 }
    pub fn get(&self, idx: usize) -> Option<Hash> { if idx >= self.len() { None } else { Some(self.get_unchecked(idx)) } }
    pub fn get_unchecked(&self, idx: usize) -> Hash {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Hash::new_unchecked(self.0.slice(start..end))
    }
    pub fn as_reader<'r>(&'r self) -> HashesReader<'r> { HashesReader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for Hashes {
    type Builder = HashesBuilder;
    const NAME: &'static str = "Hashes";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { Hashes(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { HashesReader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { HashesReader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder { Self::new_builder().extend(self.into_iter()) }
}

#[derive(Clone, Copy)]
pub struct HashesReader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for HashesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for HashesReader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for HashesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() { if i == 0 { write!(f, "{}", self.get_unchecked(i))?; } else { write!(f, ", {}", self.get_unchecked(i))?; } }
        write!(f, "]")
    }
}

impl<'r> HashesReader<'r> {
    pub const ITEM_SIZE: usize = 20;
    pub fn total_size(&self) -> usize { molecule::NUMBER_SIZE * (self.item_count() + 1) }
    pub fn item_count(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn len(&self) -> usize { self.item_count() }
    pub fn is_empty(&self) -> bool { self.len() == 0 }
    pub fn get(&self, idx: usize) -> Option<HashReader<'r>> { if idx >= self.len() { None } else { Some(self.get_unchecked(idx)) } }
    pub fn get_unchecked(&self, idx: usize) -> HashReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        HashReader::new_unchecked(&self.as_slice()[start..end])
    }
}

impl<'r> molecule::prelude::Reader<'r> for HashesReader<'r> {
    type Entity = Hashes;
    const NAME: &'static str = "HashesReader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { HashesReader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE { return ve!( Self , HeaderIsBroken , molecule :: NUMBER_SIZE , slice_len ); }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE { return ve!( Self , TotalSizeNotMatch , molecule :: NUMBER_SIZE , slice_len ); }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size { return ve!( Self , TotalSizeNotMatch , total_size , slice_len ); }
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct HashesBuilder(pub(crate) Vec<Hash>);

impl HashesBuilder {
    pub const ITEM_SIZE: usize = 20;
    pub fn set(mut self, v: Vec<Hash>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: Hash) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item=Hash>>(mut self, iter: T) -> Self {
        for elem in iter { self.0.push(elem); }
        self
    }
}

impl molecule::prelude::Builder for HashesBuilder {
    type Entity = Hashes;
    const NAME: &'static str = "HashesBuilder";
    fn expected_length(&self) -> usize { molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len() }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] { writer.write_all(inner.as_slice())?; }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Hashes::new_unchecked(inner.into())
    }
}

pub struct HashesIterator(Hashes, usize, usize);

impl ::core::iter::Iterator for HashesIterator {
    type Item = Hash;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 { None } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}

impl ::core::iter::ExactSizeIterator for HashesIterator { fn len(&self) -> usize { self.2 - self.1 } }

impl ::core::iter::IntoIterator for Hashes {
    type Item = Hash;
    type IntoIter = HashesIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        HashesIterator(self, 0, len)
    }
}

impl<'r> HashesReader<'r> { pub fn iter<'t>(&'t self) -> HashesReaderIterator<'t, 'r> { HashesReaderIterator(&self, 0, self.len()) } }

pub struct HashesReaderIterator<'t, 'r> (&'t HashesReader<'r>, usize, usize);

impl<'t : 'r, 'r> ::core::iter::Iterator for HashesReaderIterator<'t, 'r> {
    type Item = HashReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 { None } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}

impl<'t : 'r, 'r> ::core::iter::ExactSizeIterator for HashesReaderIterator<'t, 'r> { fn len(&self) -> usize { self.2 - self.1 } }

#[derive(Clone)]
pub struct CrosschainData(molecule::bytes::Bytes);

impl ::core::fmt::LowerHex for CrosschainData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl ::core::fmt::Debug for CrosschainData { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl ::core::fmt::Display for CrosschainData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "pubkey_hashes", self.pubkey_hashes())?;
        write!(f, ", {}: {}", "threshold", self.threshold())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 { write!(f, ", .. ({} fields)", extra_count)?; }
        write!(f, " }}")
    }
}

impl ::core::default::Default for CrosschainData {
    fn default() -> Self {
        let v: Vec<u8> = vec![17, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, ];
        CrosschainData::new_unchecked(v.into())
    }
}

impl CrosschainData {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn field_count(&self) -> usize { if self.total_size() == molecule::NUMBER_SIZE { 0 } else { (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1 } }
    pub fn count_extra_fields(&self) -> usize { self.field_count() - Self::FIELD_COUNT }
    pub fn has_extra_fields(&self) -> bool { Self::FIELD_COUNT != self.field_count() }
    pub fn pubkey_hashes(&self) -> Hashes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Hashes::new_unchecked(self.0.slice(start..end))
    }
    pub fn threshold(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[12..]) as usize;
            Byte::new_unchecked(self.0.slice(start..end))
        } else { Byte::new_unchecked(self.0.slice(start..)) }
    }
    pub fn as_reader<'r>(&'r self) -> CrosschainDataReader<'r> { CrosschainDataReader::new_unchecked(self.as_slice()) }
}

impl molecule::prelude::Entity for CrosschainData {
    type Builder = CrosschainDataBuilder;
    const NAME: &'static str = "CrosschainData";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self { CrosschainData(data) }
    fn as_bytes(&self) -> molecule::bytes::Bytes { self.0.clone() }
    fn as_slice(&self) -> &[u8] { &self.0[..] }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { CrosschainDataReader::from_slice(slice).map(|reader| reader.to_entity()) }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> { CrosschainDataReader::from_compatible_slice(slice).map(|reader| reader.to_entity()) }
    fn new_builder() -> Self::Builder { ::core::default::Default::default() }
    fn as_builder(self) -> Self::Builder { Self::new_builder().pubkey_hashes(self.pubkey_hashes()).threshold(self.threshold()) }
}

#[derive(Clone, Copy)]
pub struct CrosschainDataReader<'r> (&'r [u8]);

impl<'r> ::core::fmt::LowerHex for CrosschainDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() { write!(f, "0x")?; }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}

impl<'r> ::core::fmt::Debug for CrosschainDataReader<'r> { fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result { write!(f, "{}({:#x})", Self::NAME, self) } }

impl<'r> ::core::fmt::Display for CrosschainDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "pubkey_hashes", self.pubkey_hashes())?;
        write!(f, ", {}: {}", "threshold", self.threshold())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 { write!(f, ", .. ({} fields)", extra_count)?; }
        write!(f, " }}")
    }
}

impl<'r> CrosschainDataReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize { molecule::unpack_number(self.as_slice()) as usize }
    pub fn field_count(&self) -> usize { if self.total_size() == molecule::NUMBER_SIZE { 0 } else { (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1 } }
    pub fn count_extra_fields(&self) -> usize { self.field_count() - Self::FIELD_COUNT }
    pub fn has_extra_fields(&self) -> bool { Self::FIELD_COUNT != self.field_count() }
    pub fn pubkey_hashes(&self) -> HashesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        HashesReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn threshold(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[12..]) as usize;
            ByteReader::new_unchecked(&self.as_slice()[start..end])
        } else { ByteReader::new_unchecked(&self.as_slice()[start..]) }
    }
}

impl<'r> molecule::prelude::Reader<'r> for CrosschainDataReader<'r> {
    type Entity = CrosschainData;
    const NAME: &'static str = "CrosschainDataReader";
    fn to_entity(&self) -> Self::Entity { Self::Entity::new_unchecked(self.as_slice().to_owned().into()) }
    fn new_unchecked(slice: &'r [u8]) -> Self { CrosschainDataReader(slice) }
    fn as_slice(&self) -> &'r [u8] { self.0 }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE { return ve!( Self , HeaderIsBroken , molecule :: NUMBER_SIZE , slice_len ); }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size { return ve!( Self , TotalSizeNotMatch , total_size , slice_len ); }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 { return Ok(()); }
        if slice_len < molecule::NUMBER_SIZE * 2 { return ve!( Self , HeaderIsBroken , molecule :: NUMBER_SIZE * 2 , slice_len ); }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 { return ve!( Self , OffsetsNotMatch ); }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT { return ve!( Self , FieldCountNotMatch , Self :: FIELD_COUNT , field_count ); } else if !compatible && field_count > Self::FIELD_COUNT { return ve!( Self , FieldCountNotMatch , Self :: FIELD_COUNT , field_count ); };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size { return ve!( Self , HeaderIsBroken , header_size , slice_len ); }
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..].chunks(molecule::NUMBER_SIZE).take(field_count).map(|x| molecule::unpack_number(x) as usize).collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) { return ve!( Self , OffsetsNotMatch ); }
        HashesReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        ByteReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct CrosschainDataBuilder { pub(crate) pubkey_hashes: Hashes, pub(crate) threshold: Byte }

impl CrosschainDataBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub fn pubkey_hashes(mut self, v: Hashes) -> Self {
        self.pubkey_hashes = v;
        self
    }
    pub fn threshold(mut self, v: Byte) -> Self {
        self.threshold = v;
        self
    }
}

impl molecule::prelude::Builder for CrosschainDataBuilder {
    type Entity = CrosschainData;
    const NAME: &'static str = "CrosschainDataBuilder";
    fn expected_length(&self) -> usize { molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1) + self.pubkey_hashes.as_slice().len() + self.threshold.as_slice().len() }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.pubkey_hashes.as_slice().len();
        offsets.push(total_size);
        total_size += self.threshold.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() { writer.write_all(&molecule::pack_number(offset as molecule::Number))?; }
        writer.write_all(self.pubkey_hashes.as_slice())?;
        writer.write_all(self.threshold.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner).unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        CrosschainData::new_unchecked(inner.into())
    }
}
