type Event {
  service: String!
  topic: String!
  data: String!
}

# Bytes corresponding hex string.
scalar Bytes

# The verifier of the block header proved
type Proof {
  height: Uint64!
  round: Uint64!
  blockHash: Hash!
  signature: Bytes!
  bitmap: Bytes!
}

# Description a service interface and events
type ServiceSchema {
  # name of service
  service: String!
  # service methods, method payloads and response
  method: String!
  # all events emitted by service
  event: String!
}

# 20 bytes of account address
scalar Address

# Signature of the transaction
input InputTransactionEncryption {
  # The digest of the transaction
  txHash: Hash!
  # The public key of transfer
  pubkey: Bytes!
  # The signature of the transaction
  signature: Bytes!
}

type Mutation {
  # send transaction
  sendTransaction(
    inputRaw: InputRawTransaction!
    inputEncryption: InputTransactionEncryption!
  ): Hash!
  unsafeSendTransaction(
    inputRaw: InputRawTransaction!
    inputPrivkey: Bytes!
  ): Hash!
    @deprecated(
      reason: "DON'T use it in production! This is just for development."
    )
}

# The output digest of Keccak hash function
scalar Hash

# ChainSchema consists of all service schemas
type ChainSchema {
  schema: [ServiceSchema!]!
}

type BlockHookReceipt {
  height: Uint64!
  stateRoot: Hash!
  events: [Event!]!
}

type Query {
  # Get the block
  getBlock(height: Uint64): Block!
  # Get the transaction by hash
  getTransaction(txHash: Hash!): SignedTransaction!
  # Get the receipt by transaction hash
  getReceipt(txHash: Hash!): Receipt!
  # Get the receipt of block hook by height
  getBlockHookReceipt(height: Uint64!): BlockHookReceipt!
  # query service
  queryService(
    height: Uint64
    cyclesLimit: Uint64
    cyclesPrice: Uint64
    caller: Address!
    serviceName: String!
    method: String!
    payload: String!
  ): ServiceResponse!
  # Get all services schema, including service methods and events
  getSchema: ChainSchema!
}

type Receipt {
  stateRoot: Hash!
  height: Uint64!
  txHash: Hash!
  cyclesUsed: Uint64!
  events: [Event!]!
  response: ReceiptResponse!
}

type ReceiptResponse {
  serviceName: String!
  method: String!
  response: ServiceResponse!
}

# Uint64
scalar Uint64

type SignedTransaction {
  chainId: Hash!
  cyclesLimit: Uint64!
  cyclesPrice: Uint64!
  nonce: Hash!
  timeout: Uint64!
  serviceName: String!
  method: String!
  payload: String!
  txHash: Hash!
  pubkey: Bytes!
  signature: Bytes!
}

# Block is a single digital record created within a blockchain. Each block contains a record of the previous Block, and when linked together these become the “chain”.A block is always composed of header and body.
type Block {
  # The header section of a block
  header: BlockHeader!
  # The body section of a block
  orderedTxHashes: [Hash!]!
  # Hash of the block
  hash: Hash!
}

# Validator address set
type Validator {
  address: Address!
  proposeWeight: Int!
  voteWeight: Int!
}

# A block header is like the metadata of a block.
type BlockHeader {
  # Identifier of a chain in order to prevent replay attacks across channels
  chainId: Hash!
  # block height
  height: Uint64!
  # The height to which the block has been executed
  execHeight: Uint64!
  # The hash of the serialized previous block
  preHash: Hash!
  # A timestamp that records when the block was created
  timestamp: Uint64!
  # The merkle root of ordered transactions
  orderRoot: Hash!
  # The merkle roots of all the confirms
  confirmRoot: [Hash!]!
  # The merkle root of state root
  stateRoot: Hash!
  # The merkle roots of receipts
  receiptRoot: [Hash!]!
  # The sum of all transactions costs
  cyclesUsed: [Uint64!]!
  # The address descirbed who packed the block
  proposer: Address!
  proof: Proof!
  # The version of validator is designed for cross chain
  validatorVersion: Uint64!
  validators: [Validator!]!
}

type ServiceResponse {
  code: Uint64!
  succeedData: String!
  errorMessage: String!
}

# There was many types of transaction in Muta, A transaction often require computing resources or write data to chain,these resources are valuable so we need to pay some token for them.InputRawTransaction describes information above
input InputRawTransaction {
  # Identifier of the chain.
  chainId: Hash!
  # Mostly like the gas limit in Ethereum, describes the fee that you are willing to pay the highest price for the transaction
  cyclesLimit: Uint64!
  cyclesPrice: Uint64!
  # Every transaction has its own id, unlike Ethereum's nonce,the nonce in Muta is an hash
  nonce: Hash!
  # For security and performance reasons, Muta will only deal with trade request over a period of time,the `timeout` should be `timeout > current_block_height` and `timeout < current_block_height + timeout_gap`,the `timeout_gap` generally equal to 20.
  timeout: Uint64!
  serviceName: String!
  method: String!
  payload: String!
}

